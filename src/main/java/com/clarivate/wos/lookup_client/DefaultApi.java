/*
 * Web of Science Lookup API
 * Web of Science Lookup is a backend API that maps Web of Science API Subscription (Developer Portal), Clarivate SFDC data, and Caesar Data. The API is used to synchronize data and retrieve customer subscriptions. 
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clarivate.wos.lookup_client;

import com.clarivate.wos.lookup_client.invoker.ApiCallback;
import com.clarivate.wos.lookup_client.invoker.ApiClient;
import com.clarivate.wos.lookup_client.invoker.ApiException;
import com.clarivate.wos.lookup_client.invoker.ApiResponse;
import com.clarivate.wos.lookup_client.invoker.Configuration;
import com.clarivate.wos.lookup_client.invoker.Pair;
import com.clarivate.wos.lookup_client.invoker.ProgressRequestBody;
import com.clarivate.wos.lookup_client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.clarivate.wos.lookup_client.model.InternalUserList;
import com.clarivate.wos.lookup_client.model.SFDCAccount;
import com.clarivate.wos.lookup_client.model.SFDCAccountList;
import com.clarivate.wos.lookup_client.model.SFDCOpportunity;
import com.clarivate.wos.lookup_client.model.SFDCOpportunityList;
import com.clarivate.wos.lookup_client.model.Subscription;
import com.clarivate.wos.lookup_client.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for sFDCAccountsEnterpriseIDGet
     * @param enterpriseID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCAccountsEnterpriseIDGetCall(String enterpriseID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SFDCAccounts/{enterpriseID}"
            .replaceAll("\\{" + "enterpriseID" + "\\}", localVarApiClient.escapeString(enterpriseID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sFDCAccountsEnterpriseIDGetValidateBeforeCall(String enterpriseID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'enterpriseID' is set
        if (enterpriseID == null) {
            throw new ApiException("Missing the required parameter 'enterpriseID' when calling sFDCAccountsEnterpriseIDGet(Async)");
        }
        

        okhttp3.Call localVarCall = sFDCAccountsEnterpriseIDGetCall(enterpriseID, _callback);
        return localVarCall;

    }

    /**
     * Returns an opportunity by ID
     * TBD
     * @param enterpriseID  (required)
     * @return SFDCAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
     </table>
     */
    public SFDCAccount sFDCAccountsEnterpriseIDGet(String enterpriseID) throws ApiException {
        ApiResponse<SFDCAccount> localVarResp = sFDCAccountsEnterpriseIDGetWithHttpInfo(enterpriseID);
        return localVarResp.getData();
    }

    /**
     * Returns an opportunity by ID
     * TBD
     * @param enterpriseID  (required)
     * @return ApiResponse&lt;SFDCAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SFDCAccount> sFDCAccountsEnterpriseIDGetWithHttpInfo(String enterpriseID) throws ApiException {
        okhttp3.Call localVarCall = sFDCAccountsEnterpriseIDGetValidateBeforeCall(enterpriseID, null);
        Type localVarReturnType = new TypeToken<SFDCAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an opportunity by ID (asynchronously)
     * TBD
     * @param enterpriseID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCAccountsEnterpriseIDGetAsync(String enterpriseID, final ApiCallback<SFDCAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = sFDCAccountsEnterpriseIDGetValidateBeforeCall(enterpriseID, _callback);
        Type localVarReturnType = new TypeToken<SFDCAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sFDCAccountsGet
     * @param sfdcApiProduct Filter by SFDC API Product Code or Name (optional)
     * @param sfdcAccountName Filter by SFDC Account Name (optional)
     * @param sfdcAccountDomain Filter by SFDC Account domain(s) (optional)
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCAccountsGetCall(String sfdcApiProduct, String sfdcAccountName, String sfdcAccountDomain, String internalUser, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SFDCAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sfdcApiProduct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sfdcApiProduct", sfdcApiProduct));
        }

        if (sfdcAccountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sfdcAccountName", sfdcAccountName));
        }

        if (sfdcAccountDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sfdcAccountDomain", sfdcAccountDomain));
        }

        if (internalUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("internalUser", internalUser));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sFDCAccountsGetValidateBeforeCall(String sfdcApiProduct, String sfdcAccountName, String sfdcAccountDomain, String internalUser, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sFDCAccountsGetCall(sfdcApiProduct, sfdcAccountName, sfdcAccountDomain, internalUser, limit, page, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of SFDC accounts
     * TBD
     * @param sfdcApiProduct Filter by SFDC API Product Code or Name (optional)
     * @param sfdcAccountName Filter by SFDC Account Name (optional)
     * @param sfdcAccountDomain Filter by SFDC Account domain(s) (optional)
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @return SFDCAccountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts list </td><td>  -  </td></tr>
     </table>
     */
    public SFDCAccountList sFDCAccountsGet(String sfdcApiProduct, String sfdcAccountName, String sfdcAccountDomain, String internalUser, Integer limit, Integer page) throws ApiException {
        ApiResponse<SFDCAccountList> localVarResp = sFDCAccountsGetWithHttpInfo(sfdcApiProduct, sfdcAccountName, sfdcAccountDomain, internalUser, limit, page);
        return localVarResp.getData();
    }

    /**
     * Returns the list of SFDC accounts
     * TBD
     * @param sfdcApiProduct Filter by SFDC API Product Code or Name (optional)
     * @param sfdcAccountName Filter by SFDC Account Name (optional)
     * @param sfdcAccountDomain Filter by SFDC Account domain(s) (optional)
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @return ApiResponse&lt;SFDCAccountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SFDCAccountList> sFDCAccountsGetWithHttpInfo(String sfdcApiProduct, String sfdcAccountName, String sfdcAccountDomain, String internalUser, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = sFDCAccountsGetValidateBeforeCall(sfdcApiProduct, sfdcAccountName, sfdcAccountDomain, internalUser, limit, page, null);
        Type localVarReturnType = new TypeToken<SFDCAccountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of SFDC accounts (asynchronously)
     * TBD
     * @param sfdcApiProduct Filter by SFDC API Product Code or Name (optional)
     * @param sfdcAccountName Filter by SFDC Account Name (optional)
     * @param sfdcAccountDomain Filter by SFDC Account domain(s) (optional)
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCAccountsGetAsync(String sfdcApiProduct, String sfdcAccountName, String sfdcAccountDomain, String internalUser, Integer limit, Integer page, final ApiCallback<SFDCAccountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = sFDCAccountsGetValidateBeforeCall(sfdcApiProduct, sfdcAccountName, sfdcAccountDomain, internalUser, limit, page, _callback);
        Type localVarReturnType = new TypeToken<SFDCAccountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sFDCAccountsPost
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCAccountsPostCall(File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SFDCAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sFDCAccountsPostValidateBeforeCall(File file, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sFDCAccountsPostCall(file, _callback);
        return localVarCall;

    }

    /**
     * Update the Account data by providing an excel file
     * TBD
     * @param file  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer sFDCAccountsPost(File file) throws ApiException {
        ApiResponse<Integer> localVarResp = sFDCAccountsPostWithHttpInfo(file);
        return localVarResp.getData();
    }

    /**
     * Update the Account data by providing an excel file
     * TBD
     * @param file  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> sFDCAccountsPostWithHttpInfo(File file) throws ApiException {
        okhttp3.Call localVarCall = sFDCAccountsPostValidateBeforeCall(file, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Account data by providing an excel file (asynchronously)
     * TBD
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCAccountsPostAsync(File file, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = sFDCAccountsPostValidateBeforeCall(file, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sFDCInternalUsersGet
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCInternalUsersGetCall(String internalUser, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SFDCInternalUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (internalUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("internalUser", internalUser));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sFDCInternalUsersGetValidateBeforeCall(String internalUser, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sFDCInternalUsersGetCall(internalUser, limit, page, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of SFDC users
     * TBD
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @return InternalUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts list </td><td>  -  </td></tr>
     </table>
     */
    public InternalUserList sFDCInternalUsersGet(String internalUser, Integer limit, Integer page) throws ApiException {
        ApiResponse<InternalUserList> localVarResp = sFDCInternalUsersGetWithHttpInfo(internalUser, limit, page);
        return localVarResp.getData();
    }

    /**
     * Returns the list of SFDC users
     * TBD
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @return ApiResponse&lt;InternalUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InternalUserList> sFDCInternalUsersGetWithHttpInfo(String internalUser, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = sFDCInternalUsersGetValidateBeforeCall(internalUser, limit, page, null);
        Type localVarReturnType = new TypeToken<InternalUserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of SFDC users (asynchronously)
     * TBD
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCInternalUsersGetAsync(String internalUser, Integer limit, Integer page, final ApiCallback<InternalUserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = sFDCInternalUsersGetValidateBeforeCall(internalUser, limit, page, _callback);
        Type localVarReturnType = new TypeToken<InternalUserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sFDCInternalUsersPost
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCInternalUsersPostCall(File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SFDCInternalUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sFDCInternalUsersPostValidateBeforeCall(File file, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sFDCInternalUsersPostCall(file, _callback);
        return localVarCall;

    }

    /**
     * Update the Internal users data by providing an excel file
     * TBD
     * @param file  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer sFDCInternalUsersPost(File file) throws ApiException {
        ApiResponse<Integer> localVarResp = sFDCInternalUsersPostWithHttpInfo(file);
        return localVarResp.getData();
    }

    /**
     * Update the Internal users data by providing an excel file
     * TBD
     * @param file  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> sFDCInternalUsersPostWithHttpInfo(File file) throws ApiException {
        okhttp3.Call localVarCall = sFDCInternalUsersPostValidateBeforeCall(file, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Internal users data by providing an excel file (asynchronously)
     * TBD
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCInternalUsersPostAsync(File file, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = sFDCInternalUsersPostValidateBeforeCall(file, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sFDCOpportunitiesGet
     * @param sfdcAccount Filter by SFDC account name or enterprise id (optional)
     * @param sfdcApiProduct Filter by SFDC API Product Code or Name (optional)
     * @param sfdcAccountDomain Filter by SFDC Account domain(s) (optional)
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Opportunity list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCOpportunitiesGetCall(String sfdcAccount, String sfdcApiProduct, String sfdcAccountDomain, String internalUser, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SFDCOpportunities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sfdcAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sfdcAccount", sfdcAccount));
        }

        if (sfdcApiProduct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sfdcApiProduct", sfdcApiProduct));
        }

        if (sfdcAccountDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sfdcAccountDomain", sfdcAccountDomain));
        }

        if (internalUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("internalUser", internalUser));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sFDCOpportunitiesGetValidateBeforeCall(String sfdcAccount, String sfdcApiProduct, String sfdcAccountDomain, String internalUser, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sFDCOpportunitiesGetCall(sfdcAccount, sfdcApiProduct, sfdcAccountDomain, internalUser, limit, page, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of opportunities
     * TBD
     * @param sfdcAccount Filter by SFDC account name or enterprise id (optional)
     * @param sfdcApiProduct Filter by SFDC API Product Code or Name (optional)
     * @param sfdcAccountDomain Filter by SFDC Account domain(s) (optional)
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @return SFDCOpportunityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Opportunity list </td><td>  -  </td></tr>
     </table>
     */
    public SFDCOpportunityList sFDCOpportunitiesGet(String sfdcAccount, String sfdcApiProduct, String sfdcAccountDomain, String internalUser, Integer limit, Integer page) throws ApiException {
        ApiResponse<SFDCOpportunityList> localVarResp = sFDCOpportunitiesGetWithHttpInfo(sfdcAccount, sfdcApiProduct, sfdcAccountDomain, internalUser, limit, page);
        return localVarResp.getData();
    }

    /**
     * Returns the list of opportunities
     * TBD
     * @param sfdcAccount Filter by SFDC account name or enterprise id (optional)
     * @param sfdcApiProduct Filter by SFDC API Product Code or Name (optional)
     * @param sfdcAccountDomain Filter by SFDC Account domain(s) (optional)
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @return ApiResponse&lt;SFDCOpportunityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Opportunity list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SFDCOpportunityList> sFDCOpportunitiesGetWithHttpInfo(String sfdcAccount, String sfdcApiProduct, String sfdcAccountDomain, String internalUser, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = sFDCOpportunitiesGetValidateBeforeCall(sfdcAccount, sfdcApiProduct, sfdcAccountDomain, internalUser, limit, page, null);
        Type localVarReturnType = new TypeToken<SFDCOpportunityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of opportunities (asynchronously)
     * TBD
     * @param sfdcAccount Filter by SFDC account name or enterprise id (optional)
     * @param sfdcApiProduct Filter by SFDC API Product Code or Name (optional)
     * @param sfdcAccountDomain Filter by SFDC Account domain(s) (optional)
     * @param internalUser Filter by name or email address of internal Clarivate account (optional)
     * @param limit null (optional, default to 10)
     * @param page null (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Opportunity list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCOpportunitiesGetAsync(String sfdcAccount, String sfdcApiProduct, String sfdcAccountDomain, String internalUser, Integer limit, Integer page, final ApiCallback<SFDCOpportunityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = sFDCOpportunitiesGetValidateBeforeCall(sfdcAccount, sfdcApiProduct, sfdcAccountDomain, internalUser, limit, page, _callback);
        Type localVarReturnType = new TypeToken<SFDCOpportunityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sFDCOpportunitiesOpportunityIDGet
     * @param opportunityID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Opportunity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCOpportunitiesOpportunityIDGetCall(String opportunityID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SFDCOpportunities/{opportunityID}"
            .replaceAll("\\{" + "opportunityID" + "\\}", localVarApiClient.escapeString(opportunityID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sFDCOpportunitiesOpportunityIDGetValidateBeforeCall(String opportunityID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'opportunityID' is set
        if (opportunityID == null) {
            throw new ApiException("Missing the required parameter 'opportunityID' when calling sFDCOpportunitiesOpportunityIDGet(Async)");
        }
        

        okhttp3.Call localVarCall = sFDCOpportunitiesOpportunityIDGetCall(opportunityID, _callback);
        return localVarCall;

    }

    /**
     * Returns an opportunity by ID
     * TBD
     * @param opportunityID  (required)
     * @return SFDCOpportunity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Opportunity </td><td>  -  </td></tr>
     </table>
     */
    public SFDCOpportunity sFDCOpportunitiesOpportunityIDGet(String opportunityID) throws ApiException {
        ApiResponse<SFDCOpportunity> localVarResp = sFDCOpportunitiesOpportunityIDGetWithHttpInfo(opportunityID);
        return localVarResp.getData();
    }

    /**
     * Returns an opportunity by ID
     * TBD
     * @param opportunityID  (required)
     * @return ApiResponse&lt;SFDCOpportunity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Opportunity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SFDCOpportunity> sFDCOpportunitiesOpportunityIDGetWithHttpInfo(String opportunityID) throws ApiException {
        okhttp3.Call localVarCall = sFDCOpportunitiesOpportunityIDGetValidateBeforeCall(opportunityID, null);
        Type localVarReturnType = new TypeToken<SFDCOpportunity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an opportunity by ID (asynchronously)
     * TBD
     * @param opportunityID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Opportunity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCOpportunitiesOpportunityIDGetAsync(String opportunityID, final ApiCallback<SFDCOpportunity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sFDCOpportunitiesOpportunityIDGetValidateBeforeCall(opportunityID, _callback);
        Type localVarReturnType = new TypeToken<SFDCOpportunity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sFDCOpportunitiesPost
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCOpportunitiesPostCall(File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SFDCOpportunities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sFDCOpportunitiesPostValidateBeforeCall(File file, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sFDCOpportunitiesPostCall(file, _callback);
        return localVarCall;

    }

    /**
     * Update the OPP data by providing an excel file
     * TBD
     * @param file  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer sFDCOpportunitiesPost(File file) throws ApiException {
        ApiResponse<Integer> localVarResp = sFDCOpportunitiesPostWithHttpInfo(file);
        return localVarResp.getData();
    }

    /**
     * Update the OPP data by providing an excel file
     * TBD
     * @param file  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> sFDCOpportunitiesPostWithHttpInfo(File file) throws ApiException {
        okhttp3.Call localVarCall = sFDCOpportunitiesPostValidateBeforeCall(file, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the OPP data by providing an excel file (asynchronously)
     * TBD
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sFDCOpportunitiesPostAsync(File file, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = sFDCOpportunitiesPostValidateBeforeCall(file, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = subscriptionsGetCall(_callback);
        return localVarCall;

    }

    /**
     * returns application and subscription info for those apps not older than 90 days that have not been approved
     * TBD
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription List </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscription> subscriptionsGet() throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = subscriptionsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * returns application and subscription info for those apps not older than 90 days that have not been approved
     * TBD
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription List </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> subscriptionsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = subscriptionsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns application and subscription info for those apps not older than 90 days that have not been approved (asynchronously)
     * TBD
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsGetAsync(final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksIdGet
     * @param id Task id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tasksIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = tasksIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Returns the task
     * TBD
     * @param id Task id (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task </td><td>  -  </td></tr>
     </table>
     */
    public Task tasksIdGet(Integer id) throws ApiException {
        ApiResponse<Task> localVarResp = tasksIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns the task
     * TBD
     * @param id Task id (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> tasksIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tasksIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the task (asynchronously)
     * TBD
     * @param id Task id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksIdGetAsync(Integer id, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
