/*
 * Web of Science Lookup API
 * Web of Science Lookup is a backend API that maps Web of Science API Subscription (Developer Portal), Clarivate SFDC data, and Caesar Data. The API is used to synchronize data and retrieve customer subscriptions. 
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clarivate.wos.lookup_client;

import com.clarivate.wos.lookup_client.invoker.ApiException;
import java.io.File;
import com.clarivate.wos.lookup_client.model.InternalUserList;
import com.clarivate.wos.lookup_client.model.SFDCAccount;
import com.clarivate.wos.lookup_client.model.SFDCAccountList;
import com.clarivate.wos.lookup_client.model.SFDCOpportunity;
import com.clarivate.wos.lookup_client.model.SFDCOpportunityList;
import com.clarivate.wos.lookup_client.model.Subscription;
import com.clarivate.wos.lookup_client.model.Task;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Returns an opportunity by ID
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sFDCAccountsEnterpriseIDGetTest() throws ApiException {
        String enterpriseID = null;
                SFDCAccount response = api.sFDCAccountsEnterpriseIDGet(enterpriseID);
        // TODO: test validations
    }
    
    /**
     * Returns the list of SFDC accounts
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sFDCAccountsGetTest() throws ApiException {
        String sfdcApiProduct = null;
        String sfdcAccountName = null;
        String sfdcAccountDomain = null;
        String internalUser = null;
        Integer limit = null;
        Integer page = null;
                SFDCAccountList response = api.sFDCAccountsGet(sfdcApiProduct, sfdcAccountName, sfdcAccountDomain, internalUser, limit, page);
        // TODO: test validations
    }
    
    /**
     * Update the Account data by providing an excel file
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sFDCAccountsPostTest() throws ApiException {
        File file = null;
                Integer response = api.sFDCAccountsPost(file);
        // TODO: test validations
    }
    
    /**
     * Returns the list of SFDC users
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sFDCInternalUsersGetTest() throws ApiException {
        String internalUser = null;
        Integer limit = null;
        Integer page = null;
                InternalUserList response = api.sFDCInternalUsersGet(internalUser, limit, page);
        // TODO: test validations
    }
    
    /**
     * Update the Internal users data by providing an excel file
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sFDCInternalUsersPostTest() throws ApiException {
        File file = null;
                Integer response = api.sFDCInternalUsersPost(file);
        // TODO: test validations
    }
    
    /**
     * Returns the list of opportunities
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sFDCOpportunitiesGetTest() throws ApiException {
        String sfdcAccount = null;
        String sfdcApiProduct = null;
        String sfdcAccountDomain = null;
        String internalUser = null;
        Integer limit = null;
        Integer page = null;
                SFDCOpportunityList response = api.sFDCOpportunitiesGet(sfdcAccount, sfdcApiProduct, sfdcAccountDomain, internalUser, limit, page);
        // TODO: test validations
    }
    
    /**
     * Returns an opportunity by ID
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sFDCOpportunitiesOpportunityIDGetTest() throws ApiException {
        String opportunityID = null;
                SFDCOpportunity response = api.sFDCOpportunitiesOpportunityIDGet(opportunityID);
        // TODO: test validations
    }
    
    /**
     * Update the OPP data by providing an excel file
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sFDCOpportunitiesPostTest() throws ApiException {
        File file = null;
                Integer response = api.sFDCOpportunitiesPost(file);
        // TODO: test validations
    }
    
    /**
     * returns application and subscription info for those apps not older than 90 days that have not been approved
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsGetTest() throws ApiException {
                List<Subscription> response = api.subscriptionsGet();
        // TODO: test validations
    }
    
    /**
     * Returns the task
     *
     * TBD
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksIdGetTest() throws ApiException {
        Integer id = null;
                Task response = api.tasksIdGet(id);
        // TODO: test validations
    }
    
}
